import { prisma } from "@/lib/database";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { formatCurrency, formatDateTime } from "@/lib/utils";

export default async function AdminDashboardPage() {
  const [workerCount, employerCount, openJobs, filledJobs, bookingCounts, invoices, payouts] = await Promise.all([
    prisma.workerProfile.count(),
    prisma.employerProfile.count(),
    prisma.jobPosting.count({ where: { status: "OPEN" } }),
    prisma.jobPosting.count({ where: { status: "FILLED" } }),
    prisma.booking.groupBy({
      by: ["status"],
      _count: true,
    }),
    prisma.invoice.findMany({ orderBy: { createdAt: "desc" }, take: 5 }),
    prisma.payout.groupBy({ by: ["status"], _count: true }),
  ]);

  const acceptedBookings = bookingCounts.find((item) => item.status === "ACCEPTED")?._count ?? 0;
  const totalBookings = bookingCounts.reduce((sum, item) => sum + item._count, 0);
  const fillRate = totalBookings ? Math.round((acceptedBookings / totalBookings) * 100) : 0;

  const pendingPayouts = payouts.find((item) => item.status === "PENDING")?._count ?? 0;

  return (
    <div className="space-y-10">
      <div className="space-y-2">
        <Badge variant="outline" className="w-fit">Platform admin</Badge>
        <h1 className="text-3xl font-semibold">Operations overview</h1>
        <p className="text-sm text-muted-foreground">Monitor key metrics across the marketplace.</p>
      </div>

      <section className="grid gap-4 md:grid-cols-2 xl:grid-cols-4">
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Total workers</CardDescription>
            <CardTitle className="text-3xl">{workerCount}</CardTitle>
          </CardHeader>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Total employers</CardDescription>
            <CardTitle className="text-3xl">{employerCount}</CardTitle>
          </CardHeader>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Open jobs</CardDescription>
            <CardTitle className="text-3xl">{openJobs}</CardTitle>
          </CardHeader>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Fill rate</CardDescription>
            <CardTitle className="text-3xl">{fillRate}%</CardTitle>
          </CardHeader>
        </Card>
      </section>

      <section className="grid gap-6 lg:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle className="text-base">Recent invoices</CardTitle>
            <CardDescription>Latest billing documents generated by employers.</CardDescription>
          </CardHeader>
          <CardContent className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Invoice</TableHead>
                  <TableHead>Job</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Status</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {invoices.length ? (
                  invoices.map((invoice) => (
                    <TableRow key={invoice.id}>
                      <TableCell>
                        <div className="font-medium">{invoice.id}</div>
                        <div className="text-xs text-muted-foreground">{formatDateTime(invoice.createdAt)}</div>
                      </TableCell>
                      <TableCell>{invoice.jobId}</TableCell>
                      <TableCell>{formatCurrency(invoice.amountCents / 100)}</TableCell>
                      <TableCell className="capitalize">{invoice.status.toLowerCase()}</TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={4} className="h-24 text-center text-sm text-muted-foreground">
                      No invoices yet.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-base">Payout status</CardTitle>
            <CardDescription>Workers awaiting payment vs paid out.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4 text-sm text-muted-foreground">
            <div className="flex items-center justify-between">
              <span>Pending payouts</span>
              <span className="font-medium text-foreground">{pendingPayouts}</span>
            </div>
            <div className="flex items-center justify-between">
              <span>Filled jobs</span>
              <span className="font-medium text-foreground">{filledJobs}</span>
            </div>
            <p className="text-xs text-muted-foreground">
              Trigger payouts after events conclude and attendance is verified.
            </p>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}
